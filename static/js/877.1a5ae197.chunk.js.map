{"version":3,"file":"static/js/877.1a5ae197.chunk.js","mappings":"8SACAA,EAAAA,EAAAA,SAAAA,QAAyB,8BACzB,IAAMC,EAAU,mCAEHC,EAAkB,mCAAG,oGACTF,EAAAA,EAAAA,IAAA,qCAAwCC,IAD/B,cAC1BE,EAD0B,yBAGzBA,EAASC,MAHgB,2CAAH,qDAMlBC,EAAiB,mCAAG,WAAMC,GAAN,uFACRN,EAAAA,EAAAA,IAAA,kBACVM,EADU,oBACIL,EADJ,oBADQ,cACzBE,EADyB,yBAIxBA,EAASC,MAJe,2CAAH,sDAOjBG,EAAS,mCAAG,WAAMD,GAAN,uFACAN,EAAAA,EAAAA,IAAA,kBACVM,EADU,4BACYL,EADZ,oBADA,cACjBE,EADiB,yBAIhBA,EAASC,MAJO,2CAAH,sDAOTI,EAAY,mCAAG,WAAMF,GAAN,uFACHN,EAAAA,EAAAA,IAAA,kBACVM,EADU,4BACYL,EADZ,2BADG,cACpBE,EADoB,yBAInBA,EAASC,MAJU,2CAAH,sDAOZK,EAAoB,mCAAG,WAAMC,GAAN,uFACXV,EAAAA,EAAAA,IAAA,iCACKC,EADL,kBACsBS,IAFX,cAC5BP,EAD4B,yBAI3BA,EAASC,MAJkB,2CAAH,qD,+HC9BpBO,E,OAAoBC,GAAAA,MAAH,6C,SCCjBC,EAAc,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,oBAC5B,OACE,SAACH,EAAD,CACEI,KAAK,OACLC,YAAY,cACZC,SAAU,SAAAC,GACRJ,EAAoBI,EAAIC,OAAOC,MAChC,GAGN,E,mCCLKC,EAAY,kCA4DlB,EA1De,WAAO,IAAD,EACnB,GAAwCC,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACA,GAAoCN,EAAAA,EAAAA,UAAS,IAA7C,eAAOO,EAAP,KAAmBC,EAAnB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMvB,EAAK,UAAGsB,EAAaE,IAAI,gBAApB,QAAgC,GAErCC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WAAM,wCACd,sGAEIX,GAAW,GAFf,UAG8BjB,EAAAA,EAAAA,IAAqBC,GAHnD,gBAGY4B,EAHZ,EAGYA,QACRd,EAAgBc,GAJpB,gDAMIV,EAASP,GANb,yBAQIK,GAAW,GARf,6EADc,uBAAC,WAAD,wBAYdH,EACD,GAAE,CAACb,IAWJ,OACE,4BACE,SAACG,EAAD,CAAaC,oBALW,SAAAM,GAC1BU,EAAcV,EACf,KAIG,mBAAQL,KAAK,SAASwB,QAZH,WACrB,MAAmB,KAAfV,EACKW,MAAM,sCAERP,EAAgB,CAAEvB,MAAOmB,EAAWY,QAC5C,EAOG,UACE,SAAC,MAAD,MAEDhB,IAAW,wCACXF,EAAamB,OAAS,IACrB,wBACGnB,EAAaoB,KAAI,SAAAC,GAChB,OACE,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAMtC,IAAMwC,MAAO,CAAEC,KAAMZ,GAAhD,SACGS,EAAMI,SAFFJ,EAAMtC,GAMlB,MAGJqB,IAAS,yBAAMA,MAGrB,C","sources":["api.js","components/SearchInput/SearchInput.styled.js","components/SearchInput/SearchInput.js","pages/Movies.js"],"sourcesContent":["import axios from 'axios';\naxios.defaults.baseURL = 'https://api.themoviedb.org/';\nconst API_KEY = 'ef0fb983e89662afab3575284ace2b44';\n\nexport const fetchPopularMovies = async () => {\n  const response = await axios.get(`3/trending/all/day?api_key=${API_KEY}`);\n\n  return response.data;\n};\n\nexport const fetchMovieDatails = async id => {\n  const response = await axios.get(\n    `3/movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const fetchCast = async id => {\n  const response = await axios.get(\n    `3/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const fetchReviews = async id => {\n  const response = await axios.get(\n    `3/movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data;\n};\n\nexport const fetchQueryForDetails = async query => {\n  const response = await axios.get(\n    `3/search/movie?api_key=${API_KEY}&query=${query}`\n  );\n  return response.data;\n};\n","import styled from 'styled-components';\nexport const StyledSearchInput = styled.input`\n  margin-top: 12px;\n`;\n","import { StyledSearchInput } from './SearchInput.styled';\n\nexport const SearchInput = ({ setSearchInputValue }) => {\n  return (\n    <StyledSearchInput\n      type=\"text\"\n      placeholder=\"search film\"\n      onChange={evt => {\n        setSearchInputValue(evt.target.value);\n      }}\n    />\n  );\n};\n","import { fetchQueryForDetails } from 'api';\nimport { SearchInput } from 'components/SearchInput/SearchInput';\nimport { useEffect, useState } from 'react';\nimport { useLocation, useSearchParams } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\nimport { BsSearch } from 'react-icons/bs';\n\nconst ERROR_MSG = 'Something went wrong, try again';\n\nconst Movies = () => {\n  const [searchMovies, setsearchMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [searcValue, setSearcValue] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n\n  const location = useLocation();\n\n  useEffect(() => {\n    async function searchMovies() {\n      try {\n        setLoading(true);\n        const { results } = await fetchQueryForDetails(query);\n        setsearchMovies(results);\n      } catch (error) {\n        setError(ERROR_MSG);\n      } finally {\n        setLoading(false);\n      }\n    }\n    searchMovies();\n  }, [query]);\n\n  const onSearchSubmit = () => {\n    if (searcValue === '') {\n      return alert('Please enter the name of the movie');\n    }\n    return setSearchParams({ query: searcValue.trim() });\n  };\n  const setSearchInputValue = value => {\n    setSearcValue(value);\n  };\n  return (\n    <div>\n      <SearchInput setSearchInputValue={setSearchInputValue} />\n      <button type=\"button\" onClick={onSearchSubmit}>\n        <BsSearch />\n      </button>\n      {loading && <div>Loading...</div>}\n      {searchMovies.length > 0 && (\n        <ul>\n          {searchMovies.map(movie => {\n            return (\n              <li key={movie.id}>\n                <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n                  {movie.title}\n                </Link>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n      {error && <div>{error}</div>}\n    </div>\n  );\n};\nexport default Movies;\n\n// useEffect(() => {\n//   if (searcValue === '') {\n//     return;\n//   }\n\n//   const controller = new AbortController();\n//   async function searchMovies() {\n//     try {\n//       setLoading(true);\n//       const { results } = await fetchQueryForDetails(query, controller);\n//       // console.log(results);\n//       setsearchMovies(results);\n//     } catch (error) {\n//       setError(ERROR_MSG);\n//     } finally {\n//       setLoading(false);\n//     }\n//   }\n//   searchMovies();\n//   return () => {\n//     controller.abort();\n//   };\n// }, [query, searcValue]);\n"],"names":["axios","API_KEY","fetchPopularMovies","response","data","fetchMovieDatails","id","fetchCast","fetchReviews","fetchQueryForDetails","query","StyledSearchInput","styled","SearchInput","setSearchInputValue","type","placeholder","onChange","evt","target","value","ERROR_MSG","useState","searchMovies","setsearchMovies","loading","setLoading","error","setError","searcValue","setSearcValue","useSearchParams","searchParams","setSearchParams","get","location","useLocation","useEffect","results","onClick","alert","trim","length","map","movie","to","state","from","title"],"sourceRoot":""}