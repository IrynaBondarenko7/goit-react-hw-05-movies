{"version":3,"file":"static/js/357.b05854f3.chunk.js","mappings":"8SACAA,EAAAA,EAAAA,SAAAA,QAAyB,8BACzB,IAAMC,EAAU,mCAEHC,EAAkB,mCAAG,oGACTF,EAAAA,EAAAA,IAAA,qCAAwCC,IAD/B,cAC1BE,EAD0B,yBAGzBA,EAASC,MAHgB,2CAAH,qDAMlBC,EAAiB,mCAAG,WAAMC,GAAN,uFACRN,EAAAA,EAAAA,IAAA,kBACVM,EADU,oBACIL,EADJ,oBADQ,cACzBE,EADyB,yBAIxBA,EAASC,MAJe,2CAAH,sDAOjBG,EAAS,mCAAG,WAAMD,GAAN,uFACAN,EAAAA,EAAAA,IAAA,kBACVM,EADU,4BACYL,EADZ,oBADA,cACjBE,EADiB,yBAIhBA,EAASC,MAJO,2CAAH,sDAOTI,EAAY,mCAAG,WAAMF,GAAN,uFACHN,EAAAA,EAAAA,IAAA,kBACVM,EADU,4BACYL,EADZ,2BADG,cACpBE,EADoB,yBAInBA,EAASC,MAJU,2CAAH,sDAOZK,EAAoB,mCAAG,WAAMC,GAAN,uFACXV,EAAAA,EAAAA,IAAA,iCACKC,EADL,kBACsBS,IAFX,cAC5BP,EAD4B,yBAI3BA,EAASC,MAJkB,2CAAH,qD,yGC3B3BO,EAAY,kCA2ClB,UAzCgB,WACd,OAAwCC,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAkBR,OAhBAE,EAAAA,EAAAA,YAAU,WAAM,wCACd,sGAEIL,GAAW,GAFf,UAG8BR,EAAAA,EAAAA,IAAaW,GAH3C,gBAGYG,EAHZ,EAGYA,QAERR,EAAgBQ,GALpB,gDAOIJ,EAASP,GAPb,yBASIK,GAAW,GATf,6EADc,uBAAC,WAAD,wBAadO,EACD,GAAE,CAACJ,KAGF,2BACGJ,IAAW,wCACXF,EAAaW,OAAS,GACrBX,EAAaY,KAAI,SAAAC,GACf,OACE,2BACE,uBAAIA,EAAOC,UACX,uBAAID,EAAOE,YAFJF,EAAOpB,GAKnB,IACsB,IAAxBO,EAAaW,SAAiBT,IAC7B,oEAEDE,IAAS,yBAAMA,MAGrB,C","sources":["api.js","components/Reviews.js"],"sourcesContent":["import axios from 'axios';\naxios.defaults.baseURL = 'https://api.themoviedb.org/';\nconst API_KEY = 'ef0fb983e89662afab3575284ace2b44';\n\nexport const fetchPopularMovies = async () => {\n  const response = await axios.get(`3/trending/all/day?api_key=${API_KEY}`);\n\n  return response.data;\n};\n\nexport const fetchMovieDatails = async id => {\n  const response = await axios.get(\n    `3/movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const fetchCast = async id => {\n  const response = await axios.get(\n    `3/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const fetchReviews = async id => {\n  const response = await axios.get(\n    `3/movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data;\n};\n\nexport const fetchQueryForDetails = async query => {\n  const response = await axios.get(\n    `3/search/movie?api_key=${API_KEY}&query=${query}`\n  );\n  return response.data;\n};\n","import { fetchReviews } from 'api';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nconst ERROR_MSG = 'Something went wrong, try again';\n\nconst Reviews = () => {\n  const [movieReviews, setMovieReviews] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    async function getReviews() {\n      try {\n        setLoading(true);\n        const { results } = await fetchReviews(movieId);\n        // console.log(results);\n        setMovieReviews(results);\n      } catch (error) {\n        setError(ERROR_MSG);\n      } finally {\n        setLoading(false);\n      }\n    }\n    getReviews();\n  }, [movieId]);\n\n  return (\n    <div>\n      {loading && <div>Loading...</div>}\n      {movieReviews.length > 0 &&\n        movieReviews.map(review => {\n          return (\n            <li key={review.id}>\n              <p>{review.author}</p>\n              <p>{review.content}</p>\n            </li>\n          );\n        })}\n      {movieReviews.length === 0 && !loading && (\n        <p>We don't have any reviews for this movie</p>\n      )}\n      {error && <div>{error}</div>}\n    </div>\n  );\n};\nexport default Reviews;\n"],"names":["axios","API_KEY","fetchPopularMovies","response","data","fetchMovieDatails","id","fetchCast","fetchReviews","fetchQueryForDetails","query","ERROR_MSG","useState","movieReviews","setMovieReviews","loading","setLoading","error","setError","movieId","useParams","useEffect","results","getReviews","length","map","review","author","content"],"sourceRoot":""}